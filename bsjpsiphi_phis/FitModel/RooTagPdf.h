/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOTAGPDF
#define ROOTAGPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

// A pdf modeling a tag discrete probability
// eff is defined as 1 - untagged/total (range 0..1, not checked)
// asym is defined as (taggedP - taggedM)/tagged (range -1..1, not checked)
 
class RooTagPdf final: public RooAbsPdf {
public:
  RooTagPdf() {} ; 
  RooTagPdf(const char *name, const char *title,
	      RooAbsCategory& _tag,
	      RooAbsReal& _asymmetry,
	      RooAbsReal& _efficiency);
  RooTagPdf(const RooTagPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const override { return new RooTagPdf(*this,newname); }
  inline virtual ~RooTagPdf() { }
  
  Bool_t selfNormalized() const override { return true; }
  
  Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, Bool_t staticInitOK=kTRUE) const override;
  void initGenerator(Int_t code) override {} ; // optional pre-generation initialization
  void generateEvent(Int_t code) override;

protected:

  RooCategoryProxy tag ;
  RooRealProxy asymmetry ;
  RooRealProxy efficiency ;
  
  Double_t evaluate() const override;

private:

  ClassDefInlineOverride(RooTagPdf,1) // Your description goes here...
};
 
#endif
