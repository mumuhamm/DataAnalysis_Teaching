/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooDelta.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

 RooDelta::RooDelta(const char *name, const char *title, 
                        RooAbsReal& _x, double mean) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean(mean)
 { 
 } 


 RooDelta::RooDelta(const RooDelta& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean(other.mean)
 { 
 } 



 Double_t RooDelta::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   if (x > mean - 0.0001 and x < mean + 0.0001) return 1.0/0.0002 ; 
   return 0.;
 } 



 Int_t RooDelta::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t RooDelta::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   assert(code==1) ;
   
   return (TMath::Min(x.max(), mean + 0.0001) - TMath::Max(x.min(), mean - 0.0001))/0.0002;
   
   //return 1.;
 } 



 Int_t RooDelta::getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, Bool_t /*staticInitOK*/) const 
 { 
   // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE THEN IT IS SAFE TO PRECALCULATE 
   // INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS NOT SET THEN YOU SHOULD NOT ADVERTISE
   // ANY GENERATOR METHOD THAT RELIES ON PRECALCULATIONS IN initGenerator()

   if (matchArgs(directVars,generateVars,x)) return 1 ;   
   return 0 ; 
 } 



 void RooDelta::generateEvent(Int_t code) 
 { 
   // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY getGenerator()
   // RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE PROXY DATA MEMBERS THAT
   // REPRESENT THE CHOSEN OBSERVABLES

   assert(code==1) ; 
   x = mean ; 
   return; 
 } 



